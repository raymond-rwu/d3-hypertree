'use strict';

var assertNumber = function assertNumber(name, n) {
	if (typeof n !== 'number') {
		throw new TypeError(name + ' has to be a number');
	}
};

var ForceGravity = function ForceGravity() {
	var x = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	var y = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

	var nodes = void 0,
	    acceleration = void 0,
	    strength = 10000,
	    minRadius = 40;

	var distanceTo = function distanceTo(x1, y1, x2, y2) {
		return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
	};

	var computeAcceleration = function computeAcceleration(nx, ny, distance) {
		var distanceCube = Math.pow(distance, 3);
		return {
			x: (x - nx) * strength / distanceCube,
			y: (y - ny) * strength / distanceCube
		};
	};
	var initialize = function initialize(_) {
		nodes = _;
		acceleration = nodes.map(function (node) {
			var distance = distanceTo(x, y, node.x, node.y);
			return computeAcceleration(node.x, node.y, distance);
		});
	};

	var force = function force() {
		nodes.forEach(function (node, i) {
			var distance = distanceTo(x, y, node.x, node.y);
			if (distance < minRadius) {
				return;
			}
			node.vx += acceleration[i].x;
			node.vy += acceleration[i].y;
			node.x += node.vx;
			node.y += node.vy;
			var newAcceleration = computeAcceleration(node.x, node.y, distance);
			acceleration[i].x = newAcceleration.x;
			acceleration[i].y = newAcceleration.y;
		});
		return force;
	};

	force.strength = function (_strength) {
		if (_strength === undefined) {
			return strength;
		}
		assertNumber('strength', _strength);
		strength = _strength;
		return force;
	};

	force.minRadius = function (_minRadius) {
		if (_minRadius === undefined) {
			return minRadius;
		}
		assertNumber('minRadius', _minRadius);
		minRadius = _minRadius;
		return force;
	};

	force.x = function (_x) {
		if (_x === undefined) {
			return x;
		}
		assertNumber('x', _x);
		x = _x;
		return force;
	};

	force.y = function (_y) {
		if (_y === undefined) {
			return y;
		}
		assertNumber('y', _y);
		y = _y;
		return force;
	};

	force.initialize = initialize;
	return force;
};

module.exports = ForceGravity;